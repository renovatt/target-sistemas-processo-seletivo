import Head from 'next/head'
import React, { FormEvent } from 'react'
import { Inter } from 'next/font/google'
import data from '../../db.json'
import { DailyBillingProps, StatesProps } from '@/@types'
import { checkFibonacci, dailyBillingProcess, getPercentage, inverterString } from '@/connections'

const inter = Inter({ subsets: ['latin'] })

export default function Home() {
  const [inputValue, setInput] = React.useState('')
  const [inputReverse, setInputReverse] = React.useState('')
  const [resulteReverse, setResulteReverse] = React.useState('')
  const [isFibonacci, setFibonacci] = React.useState(false)
  const [dailyBilling, setDailyBilling] = React.useState<DailyBillingProps>()
  const [percentages, setPercentages] = React.useState<StatesProps[]>()

  function handleSubmit(event: FormEvent<HTMLElement>) {
    event.preventDefault()
    const response = checkFibonacci(Number(inputValue))
    if (response) {
      setFibonacci(true)
    } else {
      setFibonacci(false)
    }
    setInput('')
  }

  React.useEffect(() => {
    const response = dailyBillingProcess(data)
    setDailyBilling(response)
  }, [])

  React.useEffect(() => {
    const response = getPercentage()
    setPercentages(response)
  }, [])

  function reverseString(event: FormEvent<HTMLElement>) {
    event.preventDefault()
    const response = inverterString(inputReverse)
    setResulteReverse(response)
    setInputReverse('')
  }

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <>
        <div>
          <h1>Fibonacci Case</h1>
          <form onSubmit={handleSubmit} >
            <input
              required
              type="number"
              value={inputValue}
              onChange={({ target }) => setInput(target.value)} />
            <button>Enviar</button>
          </form>
          {isFibonacci ? <p>Pertence à sequência de Fibonacci</p> :
            <p>Não pertence à sequência de Fibonacci</p>
          }
        </div>

        <div>
          <h1>2° Case</h1>
          <h2>Faturamento Diário</h2>
          <p>O menor valor de faturamento ocorrido em um dia do mês: {dailyBilling?.lowerBilling
            .toLocaleString('pt-br', {
              style: 'currency',
              currency: 'BRL'
            })}
          </p>

          <p>O maior valor de faturamento ocorrido em um dia do mês: {dailyBilling?.higherBilling
            .toLocaleString('pt-br', {
              style: 'currency',
              currency: 'BRL'
            })}
          </p>

          <p>Total: {dailyBilling?.total
            .toLocaleString('pt-br', {
              style: 'currency',
              currency: 'BRL'
            })}
          </p>

          <p>Número de dias no mês em que o valor de faturamento diário foi superior à média mensal: {dailyBilling?.daysAboveAverage} dias.
          </p>
        </div>

        <div>
          <h1>3° Case</h1>
          <h2>Valor de faturamento mensal de uma distribuidora, detalhado por estado:</h2>
          {percentages?.map(result => (
            <p key={result?.state}>
              {result?.state}: {parseFloat(result.percentage.replace(",", "."))
                .toLocaleString('pt-br', {
                  style: 'currency',
                  currency: 'BRL'
                })}
            </p>
          ))}
        </div>

        <div>
          <h1>4° Case</h1>
          <form onSubmit={reverseString} >
            <input
              required
              type="text"
              placeholder='Digite um texto'
              value={inputReverse}
              onChange={({ target }) => setInputReverse(target.value)} />
            <button>Reverter</button>
          </form>
          {resulteReverse && <p>{resulteReverse}</p>}
        </div>
      </>
    </>
  )
}
